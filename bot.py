
import os
import re
import traceback
from datetime import datetime, timedelta, timezone
from typing import Optional

import pymorphy2
import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (CallbackContext, CallbackQueryHandler,
                          CommandHandler, Defaults, Filters, MessageHandler,
                          Updater)
from telegram.update import Message, Update

from db import (STRICT_MODE_START_FROM, db, get_income_replies_stats,
                get_not_answered_tiktoks, get_outcome_replies_tiktoks_stats,
                get_sent_tiktoks_stats, get_tiktoks_with_same_video_id,
                get_today_sent_tiktoks_count, get_top_most_popular_reactions,
                save_sent_tiktok, save_tiktok_reply_if_applicable)
from security import known_user
from tiktok import EXTRACT_SHARE_URL_FROM_TIKTOK, get_tiktok_id_by_share_url
from tiktok_utils import milliseconds_to_string_duration

morph = pymorphy2.MorphAnalyzer()

defaults = Defaults(parse_mode=telegram.ParseMode.HTML)
updater = Updater(token=os.environ['BOT_TOKEN'], defaults=defaults)

dispatcher = updater.dispatcher

COMMANDS = [
    ('start', '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é'),
    ('stats', '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–∫—Ç–æ–∫–∞–º (–µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã <code>"–ò–º—è" "DD.MM.YYYY"</code>)'),
    ('watch', '–ø–æ–ª—É—á–∏—Ç—å —Å–∞–º—ã–π —Ä–∞–Ω–Ω–∏–π –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π —Ç–∏–∫—Ç–æ–∫'),
    ('search', '–∏—Å–∫–∞—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ'),
]

success = updater.bot.set_my_commands(COMMANDS)

if not success:
    raise ValueError('Error settings commands')


@known_user
def tiktok_handler(user: dict, update: Update, context: CallbackContext) -> None:
    message = update.effective_message
    chat_id = update.effective_chat.id

    video_url = context.match.group(1)
    video_id = None

    try:
        video_id = get_tiktok_id_by_share_url(video_url)
    except Exception as e:
        context.bot.send_message(
            chat_id=26187519,
            text=f'Cannot get video_id of tiktok {video_url}\n\n{repr(e)}'
        )

    is_duplicate = send_is_duplicate_if_applicable(
        chat_id, video_id, user, update, context
    )

    if is_duplicate:
        return

    save_sent_tiktok(
        user['user_id'], message.message_id,
        message.date, message.text, video_id
    )

    send_has_not_answered_if_applicable(chat_id, message, user, update, context)
    send_milestones_if_applicable(chat_id, user, update, context)


def send_is_duplicate_if_applicable(chat_id: int, video_id: str, user: dict,
                                    update: Update, context: CallbackContext) -> bool:

    if not video_id:
        return

    already_sent_tiktoks = get_tiktoks_with_same_video_id(
        user['user_id'], video_id
    )

    if not already_sent_tiktoks:
        return False

    already_sent_tiktok = already_sent_tiktoks[0]
    sent_user = already_sent_tiktok['user']
    context.bot.send_message(
        chat_id=chat_id,
        text=(
            'ü§î –•–º–º... –ö–∞–∂–µ—Ç—Å—è —ç—Ç–æ—Ç —Ç–∏–∫—Ç–æ–∫ —É–∂–µ –ø—Ä–∏—Å—ã–ª–∞–ª–∏. '
            f"{sent_user['name']} –¥–µ–ª–∞–ª{'a' if user['gen'] == 'f' else ''} "
            f"—ç—Ç–æ {already_sent_tiktok['sent_at'].strftime('%d.%m.%Y')} (–Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã "
            '–º–æ–∂–Ω–æ –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å)'
        )
    )

    if already_sent_tiktok['sent_at'] > STRICT_MODE_START_FROM:
        context.bot.forward_message(
            chat_id=chat_id,
            from_chat_id=chat_id,
            message_id=already_sent_tiktok['message_id']
        )
    else:
        context.bot.send_message(
            chat_id=chat_id,
            text=(
                '–ü—Ä—É—Ñ —è –ø–µ—Ä–µ—Å–ª–∞—Ç—å –Ω–µ –º–æ–≥—É, –ø–æ—Ç–æ–º—É —á—Ç–æ –º–µ–Ω—è —Ç–æ–≥–¥–∞ –µ—â–µ –Ω–µ –±—ã–ª–æ –≤ —á–∞—Ç–µ. '
                '–ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –ø–æ–∏—â–∏—Ç–µ –ø–æ –¥–∞—Ç–µ.'
            )
        )

    return True


def send_has_not_answered_if_applicable(chat_id: int, message: Message, user: dict,
                                        update: Update, context: CallbackContext) -> None:
    not_answered_tiktoks = get_not_answered_tiktoks(user['user_id'], offset_from_now=timedelta(hours=1))

    if not_answered_tiktoks:
        context.bot.send_message(
            chat_id=chat_id,
            reply_to_message_id=not_answered_tiktoks[0]['message_id'],
            text=(
                f"ü§´ Kind reminder! {user['name']}, —É —Ç–µ–±—è –µ—Å—Ç—å –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ —Ç–∏–∫—Ç–æ–∫–∏, –∞ "
                '—Ç—ã –ø—Ä–∏—Å—ã–ª–∞–µ—à—å –Ω–æ–≤—ã–µ. –í–µ–¥—å —Ç–µ —Ç–∏–∫—Ç–æ–∫–∏ —Ü–µ–Ω–Ω–µ–µ, —á–µ–º –≤ –ª–µ–Ω—Ç–µ: –∑–∞ —Ç–µ–±—è –∏—Ö —É–∂–µ –æ—Ç–æ–±—Ä–∞–ª–∏ '
                '–∏ –≤–æ–∑–º–æ–∂–Ω–æ –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ –∂–¥—É—Ç —Ç–≤–æ–µ–π —Ä–µ–∞–∫—Ü–∏–∏.'
            )
        )


def send_milestones_if_applicable(chat_id: int, user: dict,
                                  update: Update, context: CallbackContext) -> None:
    tiktok_morph = morph.parse('—Ç–∏–∫—Ç–æ–∫')[0]
    user_sent_tiktoks_count = get_sent_tiktoks_stats().get(user['user_id'], {}).get('sent_count', -1)
    today_sent_tiktoks_count = get_today_sent_tiktoks_count(user['user_id'])

    if user_sent_tiktoks_count % 100 == 0:
        tiktoks_word = tiktok_morph.make_agree_with_number(user_sent_tiktoks_count).word
        context.bot.send_message(
            chat_id=chat_id,
            text=(
                f"ü•Ç {user['name']}, –∞ —É —Ç–µ–±—è —é–±–∏–ª–µ–π! –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª{'a' if user['gen'] == 'f' else ''} "
                f"—É–∂–µ {user_sent_tiktoks_count} {tiktoks_word}, –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
            )
        )

    if today_sent_tiktoks_count % 15 == 0:
        tiktoks_word = tiktok_morph.make_agree_with_number(today_sent_tiktoks_count).word
        context.bot.send_message(
            chat_id=chat_id,
            text=(
                f"üëç –í–∞—É, –≤–æ—Ç —ç—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç! –ó–∞ —Å–µ–≥–æ–¥–Ω—è {user['name']} –ø–æ—Å–ª–∞–ª{'a' if user['gen'] == 'f' else ''} —É–∂–µ "
                f"{today_sent_tiktoks_count} {tiktoks_word}. –ü—Ä–µ–¥–ª–∞–≥–∞—é –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è!"
            )
        )


@known_user
def reply_handler(user: dict, update: Update, context: CallbackContext) -> None:
    message = update.effective_message

    save_tiktok_reply_if_applicable(
        user, message.reply_to_message.message_id,
        message.message_id, message.date, message.text
    )


@known_user
def start(user: dict, update: Update, context: CallbackContext) -> None:
    commands_info = '\n\n'.join(
        [f'/{command} ‚Äî {description}' for command, description in COMMANDS]
    )

    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=(
            '–ü—Ä–∏–≤–µ—Ç!\n\n'
            "–Ø –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Å–æ–±–ª—é–¥–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∞–≤–∏–ª–∞ temptok'—Å–∫–æ–≥–æ –∫–ª—É–±–∞. "
            '–ö–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –ø—Ä–∞–≤–∏–ª–∞ ‚Äî —Å—Ç–∞–Ω–µ—Ç —è—Å–Ω–æ –≤ –º–æ–º–µ–Ω—Ç –∏—Ö –Ω–∞—Ä—É—à–µ–Ω–∏—è.\n\n'
            '–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ, —á—Ç–æ–±—ã —è –ª–∏—à–Ω–∏–π —Ä–∞–∑ –Ω–∞ —Ç–µ–±—è –Ω–µ –Ω–∞–≥–æ–≤–∞—Ä–∏–≤–∞–ª, –æ—Ç–≤–µ—á–∞–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ '
            '–≤—Å–µ —Ç–∏–∫—Ç–æ–∫–∏ —á–µ—Ä–µ–∑ —Ä–µ–ø–ª–∞–∏, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n'
            f'–ß—Ç–æ –µ—â–µ:\n\n{commands_info}'
        )
    )


@known_user
def stats(user: dict, update: Update, context: CallbackContext) -> None:
    all_users = list(db.users.find({}).sort('name', 1))

    for_user_id = None
    start_date = None

    if args := context.args:
        for arg in args[:2]:
            # Try parse user
            found_user = None

            try:
                found_user = next(u for u in all_users if u['name'].lower() == arg.lower())
                for_user_id = found_user['user_id']
                continue
            except StopIteration:
                pass

            # Or try parse date
            try:
                start_date = datetime.strptime(arg, "%d.%m.%Y").replace(tzinfo=timezone.utc)
            except ValueError:
                pass

    if for_user_id:
        text = form_stats_for_person(for_user_id, all_users, start_date)
    else:
        text = form_stats_summary(all_users, start_date)

    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text
    )


def form_stats_summary(users: list, start_date: Optional[datetime]) -> str:
    tiktok_morph = morph.parse('—Ç–∏–∫—Ç–æ–∫')[0]

    sent_stats = get_sent_tiktoks_stats(start_date)
    outcome_replies_stats = get_outcome_replies_tiktoks_stats(start_date)
    income_replies_stats = get_income_replies_stats(start_date)

    text = ''

    for user in users:
        user_sent_stats = sent_stats.get(user['user_id'])
        user_outcome_replies_stats = outcome_replies_stats.get(user['user_id'])
        user_income_replies_stats = income_replies_stats.get(user['user_id'])

        text += f"<b>{user['name']}</b>\n"

        if user_sent_stats and user_sent_stats['sent_count']:
            tiktoks_word = tiktok_morph.make_agree_with_number(user_sent_stats['sent_count']).word
            got_answers_percent = round(user_sent_stats['got_replies_count'] / user_sent_stats['sent_count'] * 100)

            text += (
                f"–û—Ç–ø—Ä–∞–≤–∏–ª{'a' if user['gen'] == 'f' else ''} "
                f"<code>{user_sent_stats['sent_count']}</code> {tiktoks_word} "
                f"–∏ –ø–æ–ª—É—á–∏–ª{'a' if user['gen'] == 'f' else ''} –æ—Ç–≤–µ—Ç –Ω–∞ "
                f"<code>{user_sent_stats['got_replies_count']}</code> –∏–∑ –Ω–∏—Ö ({got_answers_percent}%). "
            )

            if user_income_replies_stats:
                text += (
                    f"AVG –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –∑–∞ "
                    f"{milliseconds_to_string_duration(user_income_replies_stats['avg_income_reply_time'])}, "
                    f"AVG –¥–ª–∏–Ω–∞ –ø–æ–ª—É—á–∞–µ–º–æ–≥–æ –∞—Ö–∞—Ö–∞ ‚Äî "
                    f"{round(user_income_replies_stats['avg_income_laugh_indicator'], 1)}"
                )

        else:
            text += f"–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª{'a' if user['gen'] == 'f' else ''} —Ç–∏–∫—Ç–æ–∫–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥ :("

        text += '\n\n'

        others_sent_count = sum([v['sent_count'] for k, v in sent_stats.items() if k != user['user_id']])

        if others_sent_count:
            replied_count = 0

            if user_outcome_replies_stats:
                replied_count = user_outcome_replies_stats['replied_count']

            text += (
                f"–û—Ç–≤–µ—Ç–∏–ª{'a' if user['gen'] == 'f' else ''} "
                f"–Ω–∞ <code>{replied_count}</code> "
                f"–∏–∑ <code>{others_sent_count}</code> —Ç–∏–∫—Ç–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ "
                f"–ø–æ–ª—É—á–∏–ª{'a' if user['gen'] == 'f' else ''}. "
            )

            if user_outcome_replies_stats:
                text += (
                    f"AVG –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ "
                    f"{milliseconds_to_string_duration(user_outcome_replies_stats['avg_outcome_reply_time'])}, "
                    f"AVG –¥–ª–∏–Ω–∞ –∞—Ö–∞—Ö–∞ –≤ –æ—Ç–≤–µ—Ç–µ ‚Äî "
                    f"{round(user_outcome_replies_stats['avg_outcome_laugh_indicator'], 1)}"
                )
        else:
            text += f"–ê –æ—Ç–≤–µ—á–∞—Ç—å {'–µ–π' if user['gen'] == 'f' else '–µ–º—É'} –Ω–µ–∫–æ–º—É ‚Äî –Ω–µ—Ç —Ç–∏–∫—Ç–æ–∫–æ–≤"

        text += '\n\n'

    return text


def form_stats_for_person(user_id: int, users: list, start_date: Optional[datetime]) -> str:
    text = (
        '–¢—É—Ç –±—É–¥–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –∫—Ç–æ –∫–æ–º—É –∫–∞–∫ –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –ø–æ—Ç–æ–º...\n\n'
    )

    # get_personal_income_stats(user_id, start_date)
    # get_personal_outcome_stats(user_id, start_date)

    reactions = get_top_most_popular_reactions(user_id, start_date)

    text += '–°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ —Ä–µ–∞–∫—Ü–∏–∏:\n'
    if reactions:
        for i, reaction in enumerate(reactions, start=1):
            text += f"{i}. {reaction['_id']} ({reaction['frequency']})\n"
    else:
        text += '–ù–µ—Ç —Ä–µ–∞–∫—Ü–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥'

    return text


@known_user
def watch(user: dict, update: Update, context: CallbackContext) -> None:
    chat_id = update.effective_chat.id

    all_users = list(db.users.find({}).sort('name', 1))

    watch_user = user

    if args := context.args:
        try:
            found_user = next(u for u in all_users if u['name'].lower() == args[0].lower())
            watch_user = found_user
        except StopIteration:
            pass

    not_answered_tiktoks = get_not_answered_tiktoks(watch_user['user_id'])

    if not_answered_tiktoks:
        tiktoks_count = len(not_answered_tiktoks)
        tiktok_morph = morph.parse('—Ç–∏–∫—Ç–æ–∫')[0].make_agree_with_number(tiktoks_count).word

        context.bot.send_message(
            chat_id=chat_id,
            text=f'–£ —Ç–µ–±—è {tiktoks_count} {tiktok_morph} –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É, –Ω–∞—á–∏–Ω–∞—è —Å —ç—Ç–æ–≥–æ üëÜ',
            reply_to_message_id=not_answered_tiktoks[0]['message_id']
        )
    else:
        context.bot.send_message(
            chat_id=chat_id,
            text=(
                f"–¢—ã –º–æ–ª–æ–¥–µ—Ü, —Ç—ã –≤—Å–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª{'a' if user['gen'] == 'f' else ''}! "
                '–ú–æ–∂–Ω–æ —Å —á–∏—Å—Ç–æ–π —Å–æ–≤–µ—Å—Ç—å—é –∏–¥—Ç–∏ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤—ã–µ —Ç–∏–∫—Ç–æ–∫–∏ –∏ —Å–∫–∏–¥—ã–≤–∞—Ç—å –¥—Ä—É–∑—å—è–º üòä'
            )
        )


@known_user
def search(user: dict, update: Update, context: CallbackContext) -> None:
    chat_id = update.effective_chat.id

    if not context.args:
        return

    video_url = context.args[0]

    if not (m := re.match(EXTRACT_SHARE_URL_FROM_TIKTOK, video_url)):
        context.bot.send_message(
            chat_id=chat_id,
            text='–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∏–∫—Ç–æ–∫. <code>/manage https://vm.tiktok.com/some_id/</code>'
        )

    video_url = m.group(1)

    try:
        video_id = get_tiktok_id_by_share_url(video_url)
    except Exception as e:
        context.bot.send_message(
            chat_id=chat_id,
            text='–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–±–∏–≤–∫–µ —Ç–∏–∫—Ç–æ–∫–∞ —á–µ—Ä–µ–∑ —Å–∞–π—Ç —Ç–∏–∫—Ç–æ–∫–∞...'
        )
        context.bot.send_message(
            chat_id=chat_id,
            text=f'Cannot get video_id of tiktok {video_url}\n\n{repr(e)}'
        )

    tiktoks = get_tiktoks_with_same_video_id(
        user['user_id'], video_id
    )

    text = '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–∏–∫—Ç–æ–∫–∞:\n'
    reply_markup = None

    if tiktoks:
        for i, tiktok in enumerate(tiktoks, start=1):
            text += f"{i}. {tiktok['user']['name']} ‚Äî {tiktok['sent_at'].strftime('%d.%m.%Y')}\n"

        reply_markup = InlineKeyboardMarkup.from_column([
            InlineKeyboardButton(
                text='üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ',
                callback_data=f"search_delete_top__{tiktok['message_id']}"
            ),
            InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å', callback_data='search_close'),
        ])
    else:
        text = '–≠—Ç–æ—Ç —Ç–∏–∫—Ç–æ–∫ –µ—â–µ –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–ª—Å—è'

    context.bot.send_message(chat_id, text, reply_markup=reply_markup)


def callback(update: Update, context: CallbackContext) -> None:
    update.callback_query.answer()
    payload = update.callback_query.data
    chat_id = update.effective_chat.id

    if payload.startswith('search_delete_'):
        payload = payload.removeprefix('search_delete_')
        payload, message_id = payload.split('__')
        found_tiktok = db.tiktoks.find_one({'message_id': int(message_id)})

        if not found_tiktok:
            context.bot.send_message(chat_id, '–¢–∏–∫—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return

        if payload == 'top':
            additional_text = (
                f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–∫—Ç–æ–∫–∞ (–æ—Ç {found_tiktok['sent_at'].strftime('%d.%m.%Y')}) "
                '–±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ. –û–∫?'
            )
            reply_markup = InlineKeyboardMarkup.from_column([
                InlineKeyboardButton(
                    text='‚ùå –î–∞, —É–¥–∞–ª–∏—Ç—å',
                    callback_data=f'search_delete_confirm__{message_id}'
                ),
                InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='search_close'),
            ])
        else:
            reply_markup = None
            db.tiktoks.delete_one({'message_id': int(message_id)})
            additional_text = (
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–∫—Ç–æ–∫–∞ –æ—Ç {found_tiktok['sent_at'].strftime('%d.%m.%Y')} "
                '–±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ ‚úÖ'
            )

        update.callback_query.edit_message_text(
            text=f'{update.effective_message.text}\n\n{additional_text}',
            reply_markup=reply_markup
        )
    else:
        update.callback_query.edit_message_reply_markup(reply_markup=None)


def error_handler(update: Update, context: CallbackContext) -> None:
    try:
        raise context.error
    except Exception as e:
        exc_str = traceback.format_exc(e)
        try:
            context.bot.send_message(
                chat_id=26187519,
                text=exc_str[:4000]
            )

            if not update.callback_query:
                context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text='üí´ –ß—Ç–æ-—Ç–æ —É–ø–∞–ª–æ... –°–µ—Ä–µ–∂–∞, –ø–æ—á–∏–Ω–∏'
                )

        except Exception:
            pass


tiktoks_handler = MessageHandler(
    Filters.text & Filters.regex(EXTRACT_SHARE_URL_FROM_TIKTOK) & ~Filters.update.edited_message,
    tiktok_handler
)

replies_handler = MessageHandler(
    Filters.reply & ~Filters.update.edited_message,
    reply_handler
)

dispatcher.add_handler(CommandHandler('start', start))
dispatcher.add_handler(CommandHandler('stats', stats))
dispatcher.add_handler(CommandHandler('watch', watch))
dispatcher.add_handler(CommandHandler('search', search))
dispatcher.add_handler(CallbackQueryHandler(callback))
dispatcher.add_handler(tiktoks_handler)
dispatcher.add_handler(replies_handler)
dispatcher.add_error_handler(error_handler)
updater.start_polling()
