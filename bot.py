
import os
from datetime import timedelta

from telegram.ext import (CallbackContext, CallbackQueryHandler,
                          CommandHandler, Filters, MessageHandler, Updater)
from telegram.update import Update

from db import (STRICT_MODE_START_FROM, db, get_last_not_answered_tiktok,
                get_overall_tiktok_stats, save_sent_tiktok,
                save_tiktok_reply_if_applicable)

updater = Updater(token=os.environ['BOT_TOKEN'])

dispatcher = updater.dispatcher

COMMANDS = [
    ('start', '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é'),
    ('stats', '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–∫—Ç–æ–∫–∞–º'),
    ('watch', '–ø–æ–ª—É—á–∏—Ç—å —Å–∞–º—ã–π —Ä–∞–Ω–Ω–∏–π –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π —Ç–∏–∫—Ç–æ–∫'),
    ('fails', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–µ–π–ª–æ–≤ / –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–µ–π–ª'),
]

success = updater.bot.set_my_commands(COMMANDS)

if not success:
    raise ValueError('Error settings commands')


def tiktok_handler(update: Update, context: CallbackContext) -> None:
    message = update.effective_message
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    known_user = db.users.find_one({'user_id': user_id})

    if not known_user:
        context.bot.send_message(
            chat_id=chat_id,
            text='–ê –º—ã –∑–Ω–∞–∫–æ–º—ã? –ü–æ—á–µ–º—É —Ç—ã –∫–∏–¥–∞–µ—à—å –º–Ω–µ —Ç–∏–∫—Ç–æ–∫–∏, —è —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é...'
        )

    save_sent_tiktok(user_id, message.message_id, message.date, message.text)

    not_answered_tiktok = get_last_not_answered_tiktok(user_id, offset_from_now=timedelta(hours=1))

    if not_answered_tiktok:
        context.bot.send_message(
            chat_id=chat_id,
            reply_to_message_id=message.message_id,
            text=(
                f"{known_user['name']}, kind reminder –æ —Ç–æ–º, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ —Ç–∏–∫—Ç–æ–∫–∏, –Ω–æ "
                '—Ç—ã –ø—Ä–∏—Å—ã–ª–∞–µ—à—å –Ω–æ–≤—ã–µ. –í–µ–¥—å —Ç–µ —Ç–∏–∫—Ç–æ–∫–∏ —Ü–µ–Ω–Ω–µ–µ, —á–µ–º –≤ –ª–µ–Ω—Ç–µ: –∑–∞ —Ç–µ–±—è –∏—Ö —É–∂–µ –æ—Ç–æ–±—Ä–∞–ª–∏ '
                '–∏ –≤–æ–∑–º–æ–∂–Ω–æ –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ –∂–¥—É—Ç —Ç–≤–æ–µ–π —Ä–µ–∞–∫—Ü–∏–∏.\n\n'
                '–í–æ—Ç —Å–∞–º—ã–π —Ä–∞–Ω–Ω–∏–π –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å –Ω–µ–≥–æ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –≤—Å–µ —á—Ç–æ –ø–æ–ª–µ:'
            )
        )
        context.bot.forward_message(
            chat_id=chat_id,
            from_chat_id=chat_id,
            message_id=not_answered_tiktok[0]['message_id']
        )

    # TODO: check milestones ‚Äî every 10th tiktok in a day, every 100th tiktok overall


def reply_handler(update: Update, context: CallbackContext) -> None:
    message = update.effective_message
    user_id = update.effective_user.id

    save_tiktok_reply_if_applicable(
        user_id, message.reply_to_message.message_id,
        message.message_id, message.date, message.text
    )


def start(update: Update, context: CallbackContext) -> None:
    commands_info = '\n\n'.join(
        [f'/{command} ‚Äî {description}' for command, description in COMMANDS]
    )

    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=(
            '–ü—Ä–∏–≤–µ—Ç!\n\n'
            "–Ø –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Å–æ–±–ª—é–¥–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∞–≤–∏–ª–∞ #temptok'—Å–∫–æ–≥–æ –∫–ª—É–±–∞. "
            '–ö–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –ø—Ä–∞–≤–∏–ª–∞ ‚Äî —Å—Ç–∞–Ω–µ—Ç —è—Å–Ω–æ –≤ –º–æ–º–µ–Ω—Ç –∏—Ö –Ω–∞—Ä—É—à–µ–Ω–∏—è.\n\n'
            '–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ, —á—Ç–æ–±—ã —è –ª–∏—à–Ω–∏–π —Ä–∞–∑ –Ω–∞ —Ç–µ–±—è –Ω–µ –Ω–∞–≥–æ–≤–∞—Ä–∏–≤–∞–ª, –æ—Ç–≤–µ—á–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ '
            '–≤—Å–µ —Ç–∏–∫—Ç–æ–∫–∏ —á–µ—Ä–µ–∑ —Ä–µ–ø–ª–∞–∏, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n'
            f'–ß—Ç–æ –µ—â–µ:\n\n{commands_info}'
        )
    )


def stats(update: Update, context: CallbackContext) -> None:
    # args "/stats –°–µ—Ä–µ–∂–∞"  ‚Äî —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã —Å–µ—Ä–µ–∂–∏

    # ! Overall stats
    get_overall_tiktok_stats(STRICT_MODE_START_FROM)

    # ! Person stats
    # 1. Received tiktoks vs. answered tiktoks
    # 2. Whose tiktoks answer as in 1
    # 3. Top most popular reactions

    ...


def fails(update: Update, context: CallbackContext) -> None:
    # —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–µ–π–ª–∞–º, fails_count + –¥–æ–±–∞–≤–∏—Ç—å —Ñ–µ–π–ª (–∞ —Ç–∞–º "–ö—Ç–æ –∑–∞—Ñ–µ–π–ª–∏–ª—Å—è?")
    ...


def watch(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id,

    known_user = db.users.find_one({'user_id': user_id})

    if not known_user:
        context.bot.send_message(chat_id=chat_id, text='–ê –º—ã —Ç–æ—á–Ω–æ –∑–Ω–∞–∫–æ–º—ã? –ö–∞–∂–µ—Ç—Å—è —è —Ç–µ–±—è –Ω–µ –∑–Ω–∞—é...')

    not_answered_tiktok = get_last_not_answered_tiktok(user_id)

    if not_answered_tiktok:
        context.bot.send_message(
            chat_id=chat_id,
            text='Here you go!',
            from_chat_id=chat_id,
            reply_to_message_id=not_answered_tiktok[0]['message_id']
        )
    else:
        context.bot.send_message(
            chat_id=chat_id,
            text=(
                f"–¢—ã –º–æ–ª–æ–¥–µ—Ü, —Ç—ã –≤—Å–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª{'a' if known_user['gen'] == 'f' else ''}! "
                '–ú–æ–∂–Ω–æ —Å —á–∏—Å—Ç–æ–π —Å–æ–≤–µ—Å—Ç—å—é –∏–¥—Ç–∏ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤—ã–µ —Ç–∏–∫—Ç–æ–∫–∏ –∏ —Å–∫–∏–¥—ã–≤–∞—Ç—å –¥—Ä—É–∑—å—è–º üòä'
            )
        )


def callback_handler(update: Update, context: CallbackContext) -> None:
    ...


tiktoks_handler = MessageHandler(
    Filters.text & Filters.regex('.*vm.tiktok.com.*'),
    tiktok_handler
)

replies_handler = MessageHandler(
    Filters.reply, reply_handler
)

dispatcher.add_handler(CommandHandler('start', start))
dispatcher.add_handler(CommandHandler('stats', stats))
dispatcher.add_handler(CommandHandler('watch', watch))
dispatcher.add_handler(CommandHandler('fails', watch))
dispatcher.add_handler(tiktoks_handler)
dispatcher.add_handler(replies_handler)
dispatcher.add_handler(CallbackQueryHandler(callback_handler))
# TODO: add error handler -> tg
# TODO: add decorator "–≠—Ç–æ –≤—Å–µ –∫–æ–Ω–µ—á–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –Ω–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ"
updater.start_polling()
